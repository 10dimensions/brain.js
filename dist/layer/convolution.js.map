{"version":3,"sources":["../../src/layer/convolution.js"],"names":["predict","compareFilters","compareInputs","compareBiases","Convolution","stride","padding","bias","filterCount","filterWidth","filterHeight","settings","inputLayer","strideX","strideY","paddingX","paddingY","width","Math","floor","height","depth","biases","Array","fill","biasDeltas","filters","filterDeltas","i","push","learnFilters","learnInputs","validate","predictKernel","constants","inputWidth","inputHeight","inputDepth","output","compareFiltersKernel","compareInputsKernel","compareBiasesKernel","weights","deltas","previousLayer","nextLayer","learningRate","praxis","run","inputs","x","thread","y","sum","filterY","inputY","filterX","inputX","inputIndex","filterIndex","z","delta","inputXMax","inputYMax","offsetY","offsetX"],"mappings":"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","file":"convolution.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport { setStride, setPadding } from '../utilities/layer-setup';\nimport { Filter } from './types';\nimport randos2D from '../utilities/randos-2d';\nimport zeros2D from '../utilities/zeros-2d';\nimport randos from \"../utilities/randos\";\n\nexport default class Convolution extends Filter {\n  static get defaults() {\n    return {\n      stride: 0,\n      padding: 0,\n      bias: 0.1,\n      filterCount: 1,\n      filterWidth: 0,\n      filterHeight: 0\n    };\n  }\n\n  constructor(settings, inputLayer) {\n    super(settings);\n\n    this.stride = null;\n    this.strideX = null;\n    this.strideY = null;\n    setStride(this, settings);\n\n    this.padding = null;\n    this.paddingX = null;\n    this.paddingY = null;\n    setPadding(this, settings);\n\n    this.filterCount = settings.filterCount;\n    this.filterWidth = settings.filterWidth;\n    this.filterHeight = settings.filterHeight;\n\n    this.width = Math.floor((inputLayer.width + (this.paddingX * 2) - this.filterWidth) / this.strideX + 1);\n    this.height = Math.floor((inputLayer.height + (this.paddingY * 2) - this.filterHeight) / this.strideY + 1);\n    this.depth = this.filterCount;\n\n    this.biases = new Array(this.depth);\n    this.biases.fill(this.bias);\n    this.biasDeltas = randos(this.depth);\n\n    this.filters = [];\n    this.filterDeltas = [];\n\n    for (let i = 0; i < this.filterCount; i++) {\n      this.filters.push(randos2D(this.filterWidth, this.filterHeight));\n      this.filterDeltas.push(zeros2D(this.filterWidth, this.filterHeight));\n    }\n\n    this.learnFilters = null;\n    this.learnInputs = null;\n    this.inputLayer = inputLayer;\n    this.validate();\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      constants: {\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n        inputDepth: this.inputLayer.depth,\n        strideX: this.strideX,\n        strideY: this.strideY,\n        paddingX: this.paddingX,\n        paddingY: this.paddingY,\n        filterCount: this.filterCount,\n        filterWidth: this.filterWidth,\n        filterHeight: this.filterHeight\n      },\n      output: [this.width, this.height, this.depth]\n    });\n\n    this.compareFiltersKernel = makeKernel(compareFilters, {\n      constants: {\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n        inputDepth: this.inputLayer.depth,\n        strideX: this.strideX,\n        strideY: this.strideY,\n        paddingX: this.paddingX,\n        paddingY: this.paddingY,\n        filterCount: this.filterCount,\n        filterWidth: this.filterWidth,\n        filterHeight: this.filterHeight\n      },\n      output: [this.width, this.height, this.depth]\n    });\n\n    this.compareInputsKernel = makeKernel(compareInputs, {\n      constants: {\n        filterCount: this.filterCount\n      },\n      output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth]\n    });\n\n    this.compareBiasesKernel = makeKernel(compareBiases, {\n      output: [1, 1, this.inputLayer.depth]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer.weights, this.filters, this.biases);\n  }\n\n  compare() {\n    this.filterDeltas = this.compareFiltersKernel(this.inputLayer.weights, this.deltas);\n    this.biasDeltas = this.compareBiasesKernel(this.biasDeltas, this.deltas);\n    this.inputLayer.deltas = this.deltas = this.compareInputsKernel(this.filters, this.inputLayer.deltas);\n  }\n\n  learn(previousLayer, nextLayer, learningRate) {\n    // TODO: handle filters\n    this.weights = this.praxis.run(this, previousLayer, nextLayer, learningRate);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n}\n\nexport function predict(inputs, filters, biases) {\n  const x = (((this.thread.x / this.output.x) * this.constants.inputWidth) * this.constants.strideX) - this.constants.paddingX;\n  const y = (((this.thread.y / this.output.y) * this.constants.inputHeight) * this.constants.strideY) - this.constants.paddingY;\n\n  // convolve centered at this particular location\n  let sum = 0;\n  for (let filterY = 0; filterY < this.constants.filterHeight; filterY++) {\n    // coordinates in the original input array coordinates\n    let inputY = filterY + y;\n    for (let filterX = 0; filterX < this.constants.filterWidth; filterX++) {\n      let inputX = filterX + x;\n      if (\n        inputY >= 0\n        && inputY < this.constants.inputHeight\n        && inputX >= 0\n        && inputX < this.constants.inputWidth\n      ) {\n        for (let inputIndex = 0; inputIndex < this.constants.inputDepth; inputIndex++) {\n          for (let filterIndex = 0; filterIndex < this.constants.filterCount; filterIndex++) {\n            sum += filters[filterIndex][filterY][filterX] * inputs[inputIndex][inputY][inputX];\n          }\n        }\n      }\n    }\n  }\n  return sum + biases[this.thread.z];\n}\n\nexport function compareFilters(inputs, deltas) {\n  let sum = 0;\n  let delta = deltas[this.thread.z][this.thread.y * this.constants.paddingY][this.thread.x * this.constants.paddingX];\n  let inputXMax = this.constants.inputWidth + this.constants.paddingX;\n  let inputYMax = this.constants.inputHeight + this.constants.paddingY;\n  for (let inputY = this.thread.y - this.constants.paddingY; inputY < inputYMax; inputY += this.constants.strideY) {\n    for (let inputX = this.thread.x - this.constants.paddingX; inputX < inputXMax; inputX += this.constants.strideX) {\n      if (\n        inputY >= 0\n        && inputY < this.constants.inputHeight\n        && inputX >= 0\n        && inputX < this.constants.inputWidth\n      ) {\n        for (let inputIndex = 0; inputIndex < this.constants.inputDepth; inputIndex++) {\n          sum += inputs[inputIndex][inputY][inputX] * delta;\n        }\n      }\n    }\n  }\n  return sum;\n}\n\nexport function compareInputs(filters, deltas) {\n  let sum = 0;\n  for (let filterY = 0; filterY <= this.thread.y; filterY++) {\n    let offsetY = this.thread.y - filterY;\n    for (let filterX = 0; filterX <= this.thread.x; filterX++) {\n      let offsetX = this.thread.x - filterX;\n      for (let filterIndex = 0; filterIndex < this.constants.filterCount; filterIndex++) {\n        sum += filters[filterIndex][offsetY][offsetX] * deltas[filterIndex][filterY][filterX];\n      }\n      offsetX--;\n    }\n    offsetY--;\n  }\n  return sum;\n}\n\nexport function compareBiases(biasDeltas, deltas) {\n  let sum = 0;\n  for (let y = 0; y < this.constants.y; y++) {\n    for (let x = 0; x < this.constants.x; x++) {\n      sum += deltas[this.thread.z][y][x];\n    }\n  }\n  return biasDeltas[this.thread.z] + sum;\n}"]}