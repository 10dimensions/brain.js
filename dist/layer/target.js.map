{"version":3,"sources":["../../src/layer/target.js"],"names":["Target","settings","inputLayer","width","height","validate","weights","deltas","errors","compareFn","compare1D","compare2D","compareKernel","output","targetValues","thread","y","x"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;IAEqBA,M;;;AACnB,kBAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,gHAC1BD,QAD0B;;AAEhC,UAAKC,UAAL,GAAkBA,UAAlB;;AAEA;AACA,UAAKC,KAAL,GAAaD,WAAWC,KAAxB;AACA,UAAKC,MAAL,GAAcF,WAAWE,MAAzB;AACA,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,uBAAQ,MAAKH,KAAb,EAAoB,MAAKC,MAAzB,CAAf;AACA,UAAKG,MAAL,GAAc,uBAAQ,MAAKJ,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AACA,UAAKI,MAAL,GAAc,uBAAQ,MAAKL,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AAVgC;AAWjC;;;;mCAEc;AACb,UAAMK,YAAY,KAAKN,KAAL,KAAe,CAAf,GACdO,SADc,GAEdC,SAFJ;AAGA,WAAKC,aAAL,GAAqB,0BAAWH,SAAX,EAAsB;AACzCI,gBAAQ,CAAC,KAAKV,KAAN,EAAa,KAAKC,MAAlB;AADiC,OAAtB,CAArB;AAGD;;;8BAES;AACR;AACA,WAAKE,OAAL,GAAe,KAAKJ,UAAL,CAAgBI,OAA/B;AACD;;;4BAEOQ,Y,EAAc;AACpB;AACA;AACA,WAAKZ,UAAL,CAAgBK,MAAhB,GAAyB,KAAKA,MAAL,GAAc,KAAKC,MAAL,GAAc,KAAKI,aAAL,CAAmB,KAAKN,OAAxB,EAAiCQ,YAAjC,CAArD;AACD;;;;;;kBAhCkBd,M;;;AAmCrB,SAASU,SAAT,CAAmBJ,OAAnB,EAA4BQ,YAA5B,EAA0C;AACxC,SAAOR,QAAQ,KAAKS,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,aAAa,KAAKC,MAAL,CAAYE,CAAzB,CAA/C;AACD;;AAED,SAASN,SAAT,CAAmBL,OAAnB,EAA4BQ,YAA5B,EAA0C;AACxC,SAAOR,QAAQ,KAAKS,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,aAAa,KAAKC,MAAL,CAAYC,CAAzB,EAA4B,KAAKD,MAAL,CAAYE,CAAxC,CAA/C;AACD","file":"target.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport zeros2D from '../utilities/zeros-2d';\nimport { Filter } from './types';\n\nexport default class Target extends Filter {\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n\n    // TODO: properly handle dimensions\n    this.width = inputLayer.width;\n    this.height = inputLayer.height;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n    this.errors = zeros2D(this.width, this.height);\n  }\n\n  setupKernels() {\n    const compareFn = this.width === 1\n      ? compare1D\n      : compare2D;\n    this.compareKernel = makeKernel(compareFn, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    // NOTE: this looks like it shouldn't be, but the weights are immutable, and this is where they are reused.\n    this.weights = this.inputLayer.weights;\n  }\n\n  compare(targetValues) {\n    // this is where weights attach to deltas\n    // deltas will be zero on learn, so save it in error for comparing to mse later\n    this.inputLayer.deltas = this.deltas = this.errors = this.compareKernel(this.weights, targetValues);\n  }\n}\n\nfunction compare1D(weights, targetValues) {\n  return weights[this.thread.y][this.thread.x] - targetValues[this.thread.x];\n}\n\nfunction compare2D(weights, targetValues) {\n  return weights[this.thread.y][this.thread.x] - targetValues[this.thread.y][this.thread.x];\n}"]}