{"version":3,"sources":["../../src/layer/dropout.js"],"names":["trainingPredict","predict","Dropout","width","height","depth","probability","isTraining","settings","inputLayer","validate","predictKernel","output","weights","deltas","learnKernel","inputs","Math","random","constants","thread","y","x"],"mappings":";;;;;;;;QA0CgBA,e,GAAAA,e;QAQAC,O,GAAAA,O;;AAlDhB;;AACA;;;;;;;;;;;;IAEqBC,O;;;;;wBACG;AACpB,aAAO;AACLC,eAAO,CADF;AAELC,gBAAQ,CAFH;AAGLC,eAAO,CAHF;AAILC,qBAAa,GAJR;AAKLC,oBAAY;AALP,OAAP;AAOD;;;AAED,mBAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,kHAC1BD,QAD0B;;AAEhC,UAAKC,UAAL,GAAkBA,UAAlB;AACA,UAAKC,QAAL;AAHgC;AAIjC;;;;mCAEc;AACb,UAAI,KAAKH,UAAT,EAAqB;AACnB,aAAKI,aAAL,GAAqB,0BAAWX,eAAX,EAA4B;AAC/CY,kBAAQ,CAAC,KAAKT,KAAN,EAAa,KAAKC,MAAlB,EAA0B,KAAKC,KAA/B;AADuC,SAA5B,CAArB;AAGD,OAJD,MAIO;AACL,aAAKM,aAAL,GAAqB,0BAAWV,OAAX,EAAoB;AACvCW,kBAAQ,CAAC,KAAKT,KAAN,EAAa,KAAKC,MAAlB,EAA0B,KAAKC,KAA/B;AAD+B,SAApB,CAArB;AAGD;AACF;;;8BAES;AACR,WAAKQ,OAAL,GAAe,KAAKF,aAAL,CAAmB,KAAKF,UAAL,CAAgBI,OAAnC,CAAf;AACD;;;8BAES;AACR,WAAKC,MAAL,GAAc,KAAKC,WAAL,CAAiB,KAAKD,MAAtB,CAAd;AACD;;;;;;AAGH;;;kBAtCqBZ,O;AAuCd,SAASF,eAAT,CAAyBgB,MAAzB,EAAiC;AACtC,MAAIC,KAAKC,MAAL,KAAgB,KAAKC,SAAL,CAAeb,WAAnC,EAAgD;AAC9C,WAAO,CAAP;AACD,GAFD,MAEO;AACL,WAAOU,OAAO,KAAKI,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAP;AACD;AACF;;AAEM,SAASrB,OAAT,CAAiBe,MAAjB,EAAyB;AAC9B,SAAOA,OAAO,KAAKI,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,IAAuC,KAAKH,SAAL,CAAeb,WAA7D;AACD","file":"dropout.js","sourcesContent":["import { Filter } from './types';\nimport makeKernel from '../utilities/make-kernel';\n\nexport default class Dropout extends Filter {\n  static get defaults() {\n    return {\n      width: 0,\n      height: 0,\n      depth: 0,\n      probability: 0.5,\n      isTraining: false\n    };\n  };\n\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n    this.validate();\n  }\n\n  setupKernels() {\n    if (this.isTraining) {\n      this.predictKernel = makeKernel(trainingPredict, {\n        output: [this.width, this.height, this.depth]\n      });\n    } else {\n      this.predictKernel = makeKernel(predict, {\n        output: [this.width, this.height, this.depth]\n      });\n    }\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer.weights);\n  }\n\n  compare() {\n    this.deltas = this.learnKernel(this.deltas);\n  }\n}\n\n//TODO: implement random in glsl in gpu.js\nexport function trainingPredict(inputs) {\n  if (Math.random() < this.constants.probability) {\n    return 0;\n  } else {\n    return inputs[this.thread.y][this.thread.x];\n  }\n}\n\nexport function predict(inputs) {\n  return inputs[this.thread.y][this.thread.x] * this.constants.probability;\n}\n"]}