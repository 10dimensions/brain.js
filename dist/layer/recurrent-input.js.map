{"version":3,"sources":["../../src/layer/recurrent-input.js"],"names":["RecurrentInput","recurrentInput","validate","prototype","call","width","Error","constructor","name","height","deltas","weights"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBA,c;;;;;;;;;;;sCACDC,c,EAAgB;AAChC,WAAKA,cAAL,GAAsBA,cAAtB;AACA,WAAKC,QAAL;AACD;;;+BAaU;AACT,qBAAKC,SAAL,CAAeD,QAAf,CAAwBE,IAAxB,CAA6B,IAA7B;AACA,UAAI,KAAKC,KAAL,KAAe,KAAKJ,cAAL,CAAoBI,KAAvC,EAA8C;AAC5C,cAAM,IAAIC,KAAJ,CAAa,KAAKC,WAAL,CAAiBC,IAA9B,qBAAkD,KAAKH,KAAvD,aAAoE,KAAKJ,cAAL,CAAoBM,WAApB,CAAgCC,IAApG,gBAAmH,KAAKP,cAAL,CAAoBI,KAAvI,oBAAN;AACD;;AAED,UAAI,KAAKI,MAAL,KAAgB,KAAKR,cAAL,CAAoBQ,MAAxC,EAAgD;AAC9C,cAAM,IAAIH,KAAJ,CAAa,KAAKC,WAAL,CAAiBC,IAA9B,sBAAmD,KAAKC,MAAxD,aAAsE,KAAKR,cAAL,CAAoBM,WAApB,CAAgCC,IAAtG,gBAAqH,KAAKP,cAAL,CAAoBQ,MAAzI,oBAAN;AACD;AACF;;;kCACaJ,K,EAAOI,M,EAAQ;AAC3B,WAAKJ,KAAL,GAAaA,KAAb;AACA,WAAKI,MAAL,GAAcA,MAAd;AACD;;;8BAES,CAAE;;;8BACF,CAAE;;;4BACJ,CAAE;;;mCACK,CAAE;;;mCACF,CAAE;;;wBA/BJ;AACX,aAAO,KAAKR,cAAL,CAAoBS,MAA3B;AACD,K;sBACUA,M,EAAQ;AACjB,WAAKT,cAAL,CAAoBS,MAApB,GAA6BA,MAA7B;AACD;;;wBACa;AACZ,aAAO,KAAKT,cAAL,CAAoBU,OAA3B;AACD,K;sBACWA,O,EAAS;AACnB,WAAKV,cAAL,CAAoBU,OAApB,GAA8BA,OAA9B;AACD;;;;;;kBAhBkBX,c","file":"recurrent-input.js","sourcesContent":["import zeros2D from '../utilities/zeros-2d';\nimport { Internal } from './types';\nimport Base from './base';\n\nexport default class RecurrentInput extends Internal {\n  setRecurrentInput(recurrentInput) {\n    this.recurrentInput = recurrentInput;\n    this.validate();\n  }\n  get deltas() {\n    return this.recurrentInput.deltas;\n  }\n  set deltas(deltas) {\n    this.recurrentInput.deltas = deltas;\n  }\n  get weights() {\n    return this.recurrentInput.weights;\n  }\n  set weights(weights) {\n    this.recurrentInput.weights = weights;\n  }\n  validate() {\n    Base.prototype.validate.call(this);\n    if (this.width !== this.recurrentInput.width) {\n      throw new Error(`${this.constructor.name} layer width ${this.width} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.width}) are not same`);\n    }\n\n    if (this.height !== this.recurrentInput.height) {\n      throw new Error(`${this.constructor.name} layer height ${this.height} and ${this.recurrentInput.constructor.name} width (${this.recurrentInput.height}) are not same`);\n    }\n  }\n  setDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n\n  predict() {}\n  compare() {}\n  learn() {}\n  setupKernels() {}\n  reuseKernels() {}\n}"]}