{"version":3,"sources":["../../src/layer/soft-max.js"],"names":["SoftMax","settings","inputLayer","getExponentialsKernel","getMaxValueKernel","getSumKernel","validate","getExponentials","output","width","height","depth","getMaxValue","getSum","predictKernel","predict","compareKernel","compare","maxValue","weights","exponentials","exponentialsSum","deltas","inputs","maxInput","Infinity","z","y","x","input","sum","Math","exp","thread","target","indicator"],"mappings":"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","file":"soft-max.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport { Filter } from './types';\n\nexport default class SoftMax extends Filter {\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.getExponentialsKernel = null;\n    this.getMaxValueKernel = null;\n    this.getSumKernel = null;\n    this.inputLayer = inputLayer;\n    this.validate();\n  }\n\n  setupKernels() {\n    this.getExponentialsKernel = makeKernel(getExponentials, {\n      output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth]\n    });\n    this.getMaxValueKernel = makeKernel(getMaxValue, {\n      output: [1, 1, 1]\n    });\n    this.getSumKernel = makeKernel(getSum, {\n      output: [1, 1, this.depth]\n    });\n    this.predictKernel = makeKernel(predict, {\n      output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth]\n    });\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height, this.depth]\n    });\n  }\n\n  predict() {\n    const maxValue = this.getMaxValueKernel(this.inputLayer.weights);\n    const exponentials = this.getExponentialsKernel(this.inputLayer.weights, maxValue);\n    const exponentialsSum = this.getSumKernel(exponentials);\n    this.weights = this.predictKernel(exponentials, exponentialsSum);\n  }\n\n  compare() {\n    this.inputLayer.deltas = this.deltas;\n  }\n}\n\nfunction getMaxValue(inputs) {\n  let maxInput = -Infinity;\n  for (let z = 0; z < this.output.z; z++) {\n    for (let y = 0; y < this.output.y; y++) {\n      for (let x = 0; x < this.output.x; x++) {\n        const input = inputs[z][y][x];\n        if (input > maxInput) {\n          maxInput = input;\n        }\n      }\n    }\n  }\n  return maxInput;\n}\n\nfunction getSum(inputs) {\n  let sum = 0;\n  for (let z = 0; z < this.output.z; z++) {\n    for (let y = 0; y < this.output.y; y++) {\n      for (let x = 0; x < this.output.x; x++) {\n        sum += inputs[z][y][x];\n      }\n    }\n  }\n  return sum;\n}\n\nfunction getExponentials(inputs, maxInput) {\n  return Math.exp(inputs[this.thread.z][this.thread.y][this.thread.x] - maxInput[0]);\n}\n\nfunction predict(exponentials, exponentialsSum) {\n  return exponentials[this.thread.z][this.thread.y][this.thread.x] / exponentialsSum[0];\n}\n\nfunction compare(target, exponentials) {\n  const indicator = this.thread.x === target ? 1 : 0;\n  return -(indicator - exponentials[target]);\n}\n\n//TODO: handle: `return -Math.log(this.es[y]);` in learn"]}