{"version":3,"sources":["../../src/layer/add.js"],"names":["predict","Add","inputLayer1","inputLayer2","width","height","validate","weights","deltas","Error","predictKernel","output","previousLayer","nextLayer","learningRate","inputWeights1","inputWeights2","thread","y","x"],"mappings":";;;;;;;;;;QA2CgBA,O,GAAAA,O;;AA3ChB;;;;AACA;;;;AACA;;;;;;;;;;IAEqBC,G;;;AACnB,eAAYC,WAAZ,EAAyBC,WAAzB,EAAsC;AAAA;;AAAA;;AAEpC,UAAKD,WAAL,GAAmBA,WAAnB;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AACA,UAAKC,KAAL,GAAa,MAAKF,WAAL,CAAiBE,KAA9B;AACA,UAAKC,MAAL,GAAc,MAAKH,WAAL,CAAiBG,MAA/B;AACA,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,uBAAQ,MAAKH,KAAb,EAAoB,MAAKC,MAAzB,CAAf;AACA,UAAKG,MAAL,GAAc,uBAAQ,MAAKJ,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AARoC;AASrC;;;;+BAEU;AACT;AACA,UAAI,KAAKH,WAAL,CAAiBE,KAAjB,KAA2B,KAAKD,WAAL,CAAiBC,KAAhD,EAAuD;AACrD,cAAM,IAAIK,KAAJ,8BAAqC,KAAKP,WAAL,CAAiBE,KAAtD,aAAmE,KAAKD,WAAL,CAAiBC,KAApF,CAAN;AACD;;AAED,UAAI,KAAKF,WAAL,CAAiBG,MAAjB,KAA4B,KAAKF,WAAL,CAAiBE,MAAjD,EAAyD;AACvD,cAAM,IAAII,KAAJ,+BAAsC,KAAKP,WAAL,CAAiBG,MAAvD,aAAqE,KAAKF,WAAL,CAAiBE,MAAtF,CAAN;AACD;AACF;;;mCAEc;AACb,WAAKK,aAAL,GAAqB,0BAAWV,OAAX,EAAoB;AACvCW,gBAAQ,CAAC,KAAKP,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;AAGD;;;8BAES;AACR,WAAKE,OAAL,GAAe,KAAKG,aAAL,CAAmB,KAAKR,WAAL,CAAiBK,OAApC,EAA6C,KAAKJ,WAAL,CAAiBI,OAA9D,CAAf;AACD;;;4BAEOK,a,EAAeC,S,EAAWC,Y,EAAc;AAC9C,WAAKZ,WAAL,CAAiBM,MAAjB,GAA0B,KAAKA,MAA/B;AACA,WAAKL,WAAL,CAAiBK,MAAjB,GAA0B,KAAKA,MAA/B;AACD;;;;;;kBApCkBP,G;AAuCd,SAASD,OAAT,CAAiBe,aAAjB,EAAgCC,aAAhC,EAA+C;AACpD,SAAOD,cAAc,KAAKE,MAAL,CAAYC,CAA1B,EAA6B,KAAKD,MAAL,CAAYE,CAAzC,IAA8CH,cAAc,KAAKC,MAAL,CAAYC,CAA1B,EAA6B,KAAKD,MAAL,CAAYE,CAAzC,CAArD;AACD","file":"add.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport zeros2D from '../utilities/zeros-2d';\nimport { Operator } from './types';\n\nexport default class Add extends Operator {\n  constructor(inputLayer1, inputLayer2) {\n    super();\n    this.inputLayer1 = inputLayer1;\n    this.inputLayer2 = inputLayer2;\n    this.width = this.inputLayer1.width;\n    this.height = this.inputLayer1.height;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  validate() {\n    super.validate();\n    if (this.inputLayer1.width !== this.inputLayer2.width) {\n      throw new Error(`Layer width mismatch of ${this.inputLayer1.width} and ${this.inputLayer2.width}`);\n    }\n\n    if (this.inputLayer1.height !== this.inputLayer2.height) {\n      throw new Error(`Layer height mismatch of ${this.inputLayer1.height} and ${this.inputLayer2.height}`);\n    }\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer1.weights, this.inputLayer2.weights);\n  }\n\n  compare(previousLayer, nextLayer, learningRate) {\n    this.inputLayer1.deltas = this.deltas;\n    this.inputLayer2.deltas = this.deltas;\n  }\n}\n\nexport function predict(inputWeights1, inputWeights2) {\n  return inputWeights1[this.thread.y][this.thread.x] + inputWeights2[this.thread.y][this.thread.x];\n}"]}