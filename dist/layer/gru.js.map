{"version":3,"sources":["../../src/layer/gru.js"],"names":["settings","recurrentInput","input","height","updateGateWeights","width","updateGatePeepholes","updateGateBias","updateGate","resetGateWeights","resetGatePeepholes","resetGateBias","resetGate","cellWeights","cellPeepholes","cellBias","cell","rows","columns"],"mappings":";;;;;;AAAA;;kBAYe,UAACA,QAAD,EAAWC,cAAX,EAA2BC,KAA3B,EAAqC;AAAA,MAC1CC,MAD0C,GAC/BH,QAD+B,CAC1CG,MAD0C;;AAElD,MAAMC,oBAAoB,cAAO,EAAED,cAAF,EAAUE,OAAOH,MAAMC,MAAvB,EAAP,CAA1B;AACA,MAAMG,sBAAsB,cAAO,EAAED,OAAOF,MAAT,EAAiBA,cAAjB,EAAP,CAA5B;AACA,MAAMI,iBAAiB,aAAM,EAAEJ,cAAF,EAAN,CAAvB;AACA,MAAMK,aAAa,eACjB,WACE,WACE,gBACEJ,iBADF,EAEEF,KAFF,CADF,EAKE,gBACEI,mBADF,EAEEL,cAFF,CALF,CADF,EAWEM,cAXF,CADiB,CAAnB;;AAgBA,MAAME,mBAAmB,cAAO,EAAEN,cAAF,EAAUE,OAAOH,MAAMC,MAAvB,EAAP,CAAzB;AACA,MAAMO,qBAAqB,cAAO,EAAEL,OAAOF,MAAT,EAAiBA,cAAjB,EAAP,CAA3B;AACA,MAAMQ,gBAAgB,aAAM,EAAER,cAAF,EAAN,CAAtB;AACA,MAAIS,YAAY,eACd,WACE,WACE,gBACEH,gBADF,EAEEP,KAFF,CADF,EAKE,gBACEQ,kBADF,EAEET,cAFF,CALF,CADF,EAWEU,aAXF,CADc,CAAhB;;AAgBA,MAAME,cAAc,cAAO,EAAEV,cAAF,EAAUE,OAAOH,MAAMC,MAAvB,EAAP,CAApB;AACA,MAAMW,gBAAgB,cAAO,EAAET,OAAOF,MAAT,EAAiBA,cAAjB,EAAP,CAAtB;AACA,MAAMY,WAAW,aAAM,EAAEZ,cAAF,EAAN,CAAjB;AACA,MAAIa,OAAO,YACT,WACE,WACE,gBACEH,WADF,EAEEX,KAFF,CADF,EAKE,gBACEY,aADF,EAEE,uBACEF,SADF,EAEEX,cAFF,CAFF,CALF,CADF,EAcEc,QAdF,CADS,CAAX;;AAmBA;AACA;AACA,SAAO,WACL,uBACE,WACE,YAAKP,WAAWS,IAAhB,EAAsBT,WAAWU,OAAjC,CADF,EAEE,gBAASV,UAAT,CAFF,CADF,EAKEQ,IALF,CADK,EAQL,uBACEf,cADF,EAEEO,UAFF,CARK,CAAP;AAaD,C","file":"gru.js","sourcesContent":["import {\n  add,\n  negative,\n  multiply,\n  multiplyElement,\n  ones,\n  sigmoid,\n  random,\n  tanh,\n  zeros\n} from './';\n\nexport default (settings, recurrentInput, input) => {\n  const { height } = settings;\n  const updateGateWeights = random({ height, width: input.height });\n  const updateGatePeepholes = random({ width: height, height });\n  const updateGateBias = zeros({ height });\n  const updateGate = sigmoid(\n    add(\n      add(\n        multiply(\n          updateGateWeights,\n          input\n        ),\n        multiply(\n          updateGatePeepholes,\n          recurrentInput\n        )\n      ),\n      updateGateBias\n    )\n  );\n\n  const resetGateWeights = random({ height, width: input.height });\n  const resetGatePeepholes = random({ width: height, height });\n  const resetGateBias = zeros({ height });\n  let resetGate = sigmoid(\n    add(\n      add(\n        multiply(\n          resetGateWeights,\n          input\n        ),\n        multiply(\n          resetGatePeepholes,\n          recurrentInput\n        )\n      ),\n      resetGateBias\n    )\n  );\n\n  const cellWeights = random({ height, width: input.height });\n  const cellPeepholes = random({ width: height, height });\n  const cellBias = zeros({ height });\n  let cell = tanh(\n    add(\n      add(\n        multiply(\n          cellWeights,\n          input\n        ),\n        multiply(\n          cellPeepholes,\n          multiplyElement(\n            resetGate,\n            recurrentInput\n          )\n        )\n      ),\n      cellBias\n    )\n  );\n\n  // compute hidden state as gated, saturated cell activations\n  // negate updateGate\n  return add(\n    multiplyElement(\n      add(\n        ones(updateGate.rows, updateGate.columns),\n        negative(updateGate)\n      ),\n      cell\n    ),\n    multiplyElement(\n      recurrentInput,\n      updateGate\n    )\n  );\n}"]}