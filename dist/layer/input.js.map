{"version":3,"sources":["../../src/layer/input.js"],"names":["Input","settings","width","predict","predict1D","validate","weights","deltas","height","inputs","x","length","push","jsonLayer","constructor","defaults","name","keys","Object","i","key","type"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;;;IAEqBA,K;;;AACnB,iBAAYC,QAAZ,EAAsB;AAAA;;AAAA,8GACdA,QADc;;AAEpB,QAAI,MAAKC,KAAL,KAAe,CAAnB,EAAsB;AACpB,YAAKC,OAAL,GAAe,MAAKC,SAApB;AACD;AACD,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,IAAf;AACA,UAAKC,MAAL,GAAc,uBAAQ,MAAKL,KAAb,EAAoB,MAAKM,MAAzB,CAAd;AAPoB;AAQrB;;;;4BAEOC,M,EAAQ;AACd,WAAKH,OAAL,GAAeG,MAAf;AACD;;;8BAESA,M,EAAQ;AAChB,UAAMH,UAAU,EAAhB;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAID,OAAOE,MAA3B,EAAmCD,GAAnC,EAAwC;AACtCJ,gBAAQM,IAAR,CAAa,CAACH,OAAOC,CAAP,CAAD,CAAb;AACD;AACD,WAAKJ,OAAL,GAAeA,OAAf;AACD;;;8BAES,CAAE;;;4BACJ;AACN,WAAKC,MAAL,GAAc,uBAAQ,KAAKL,KAAb,EAAoB,KAAKM,MAAzB,CAAd;AACD;;;6BAEQ;AACP,UAAMK,YAAY,EAAlB;AADO,yBAEoB,KAAKC,WAFzB;AAAA,UAECC,QAFD,gBAECA,QAFD;AAAA,UAEWC,IAFX,gBAEWA,IAFX;;AAGP,UAAMC,OAAOC,OAAOD,IAAP,CAAYF,QAAZ,CAAb;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIF,KAAKN,MAAzB,EAAiCQ,GAAjC,EAAsC;AACpC,YAAMC,MAAMH,KAAKE,CAAL,CAAZ;AACA,gBAAQC,GAAR;AACE,eAAK,QAAL;AACA,eAAK,SAAL;AACE;AAHJ;AAKAP,kBAAUO,GAAV,IAAiB,KAAKA,GAAL,CAAjB;AACD;AACDP,gBAAUQ,IAAV,GAAiBL,IAAjB;AACA,aAAOH,SAAP;AACD;;;;;;kBA3CkBb,K","file":"input.js","sourcesContent":["import { Model } from './types';\nimport zeros2D from '../utilities/zeros-2d';\n\nexport default class Input extends Model {\n  constructor(settings) {\n    super(settings);\n    if (this.width === 1) {\n      this.predict = this.predict1D;\n    }\n    this.validate();\n    this.weights = null;\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  predict(inputs) {\n    this.weights = inputs;\n  }\n\n  predict1D(inputs) {\n    const weights = [];\n    for (let x = 0; x < inputs.length; x++) {\n      weights.push([inputs[x]]);\n    }\n    this.weights = weights;\n  }\n\n  compare() {}\n  learn() {\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  toJSON() {\n    const jsonLayer = {};\n    const { defaults, name } = this.constructor;\n    const keys = Object.keys(defaults);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      switch (key) {\n        case 'deltas':\n        case 'weights':\n          continue;\n      }\n      jsonLayer[key] = this[key];\n    }\n    jsonLayer.type = name;\n    return jsonLayer;\n  }\n}"]}