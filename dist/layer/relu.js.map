{"version":3,"sources":["../../src/layer/relu.js"],"names":["predict","compare","Relu","inputLayer","width","height","validate","weights","deltas","predictKernel","output","functions","compareKernel","inputs","thread","y","x"],"mappings":";;;;;;;;QAuCgBA,O,GAAAA,O;QAIAC,O,GAAAA,O;;AA3ChB;;AACA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBC,I;;;AACnB,gBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAEtB,UAAKA,UAAL,GAAkBA,UAAlB;;AAFsB,QAIdC,KAJc,GAIID,UAJJ,CAIdC,KAJc;AAAA,QAIPC,MAJO,GAIIF,UAJJ,CAIPE,MAJO;;AAKtB,UAAKD,KAAL,GAAaA,KAAb;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,uBAAQ,MAAKH,KAAb,EAAoB,MAAKC,MAAzB,CAAf;AACA,UAAKG,MAAL,GAAc,uBAAQ,MAAKJ,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AATsB;AAUvB;;;;mCAEc;AACb,WAAKI,aAAL,GAAqB,0BAAWT,OAAX,EAAoB;AACvCU,gBAAQ,CAAC,KAAKN,KAAN,EAAa,KAAKC,MAAlB,CAD+B;AAEvCM,mBAAW;AAF4B,OAApB,CAArB;;AAKA,WAAKC,aAAL,GAAqB,0BAAWX,OAAX,EAAoB;AACvCS,gBAAQ,CAAC,KAAKN,KAAN,EAAa,KAAKC,MAAlB,CAD+B;AAEvCM,mBAAW;AAF4B,OAApB,CAArB;AAID;;;8BAES;AACR,WAAKJ,OAAL,GAAe,KAAKE,aAAL,CAAmB,KAAKN,UAAL,CAAgBI,OAAnC,CAAf;AACD;;;8BAES;AACR,WAAKJ,UAAL,CAAgBK,MAAhB,GAAyB,KAAKI,aAAL,CAAmB,KAAKL,OAAxB,EAAiC,KAAKC,MAAtC,CAAzB;AACD;;;;;;kBA/BkBN,I;AAkCd,SAASF,OAAT,CAAiBa,MAAjB,EAAyB;AAC9B,SAAO,oBAASA,OAAO,KAAKC,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAT,CAAP;AACD;;AAEM,SAASf,OAAT,CAAiBM,OAAjB,EAA0BC,MAA1B,EAAkC;AACvC,SAAO,mBAAQD,QAAQ,KAAKO,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,CAAR,EAA+CR,OAAO,KAAKM,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAA/C,CAAP;AACD","file":"relu.js","sourcesContent":["import { Activation } from './types';\nimport makeKernel from '../utilities/make-kernel';\nimport { activate, measure } from '../activation/relu';\nimport zeros2D from '../utilities/zeros-2d';\n\nexport default class Relu extends Activation {\n  constructor(inputLayer) {\n    super();\n    this.inputLayer = inputLayer;\n\n    const { width, height } = inputLayer;\n    this.width = width;\n    this.height = height;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n      functions: [activate]\n    });\n\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height],\n      functions: [measure]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer.weights);\n  }\n\n  compare() {\n    this.inputLayer.deltas = this.compareKernel(this.weights, this.deltas);\n  }\n}\n\nexport function predict(inputs) {\n  return activate(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function compare(weights, deltas) {\n  return measure(weights[this.thread.y][this.thread.x], deltas[this.thread.y][this.thread.x]);\n}"]}