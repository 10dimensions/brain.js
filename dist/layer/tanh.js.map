{"version":3,"sources":["../../src/layer/tanh.js"],"names":["predict","compare","Tanh","inputLayer","width","height","depth","validate","weights","deltas","predictKernel","output","compareKernel","functions","inputs","Math","tanh","thread","y","x","errors"],"mappings":";;;;;;;;QAuCgBA,O,GAAAA,O;QAIAC,O,GAAAA,O;;AA3ChB;;AACA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBC,I;;;AACnB,gBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAEtB,UAAKA,UAAL,GAAkBA,UAAlB;;AAFsB,2BAIW,MAAKA,UAJhB;AAAA,QAIdC,KAJc,oBAIdA,KAJc;AAAA,QAIPC,MAJO,oBAIPA,MAJO;AAAA,QAICC,KAJD,oBAICA,KAJD;;AAKtB,UAAKF,KAAL,GAAaA,KAAb;AACA,UAAKC,MAAL,GAAcA,MAAd;AACA,UAAKC,KAAL,GAAaA,KAAb;AACA,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,uBAAQ,MAAKJ,KAAb,EAAoB,MAAKC,MAAzB,CAAf;AACA,UAAKI,MAAL,GAAc,uBAAQ,MAAKL,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AAVsB;AAWvB;;;;mCAEc;AACb,WAAKK,aAAL,GAAqB,0BAAWV,OAAX,EAAoB;AACvCW,gBAAQ,CAAC,KAAKP,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;;AAIA,WAAKO,aAAL,GAAqB,0BAAWX,OAAX,EAAoB;AACvCU,gBAAQ,CAAC,KAAKP,KAAN,EAAa,KAAKC,MAAlB,CAD+B;AAEvCQ,mBAAW;AAF4B,OAApB,CAArB;AAID;;;8BAES;AACR,WAAKL,OAAL,GAAe,KAAKE,aAAL,CAAmB,KAAKP,UAAL,CAAgBK,OAAnC,CAAf;AACD;;;8BAES;AACR,WAAKC,MAAL,GAAc,KAAKG,aAAL,CAAmB,KAAKJ,OAAxB,EAAiC,KAAKC,MAAtC,CAAd;AACD;;;;;;kBA/BkBP,I;AAkCd,SAASF,OAAT,CAAiBc,MAAjB,EAAyB;AAC9B,SAAOC,KAAKC,IAAL,CAAUF,OAAO,KAAKG,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAV,CAAP;AACD;;AAEM,SAASlB,OAAT,CAAiBO,OAAjB,EAA0BY,MAA1B,EAAkC;AACvC,SAAO,0BAAeZ,QAAQ,KAAKS,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,CAAf,EAAsDC,OAAO,KAAKH,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAtD,CAAP;AACD","file":"tanh.js","sourcesContent":["import { Activation } from './types';\nimport makeKernel from '../utilities/make-kernel';\nimport { tanh, tanhDerivative } from '../activation/tanh';\nimport zeros2D from \"../utilities/zeros-2d\";\n\nexport default class Tanh extends Activation {\n  constructor(inputLayer) {\n    super();\n    this.inputLayer = inputLayer;\n\n    const { width, height, depth } = this.inputLayer;\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height],\n      functions: [tanhDerivative]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer.weights);\n  }\n\n  compare() {\n    this.deltas = this.compareKernel(this.weights, this.deltas);\n  }\n}\n\nexport function predict(inputs) {\n  return Math.tanh(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function compare(weights, errors) {\n  return tanhDerivative(weights[this.thread.y][this.thread.x], errors[this.thread.y][this.thread.x]);\n}"]}