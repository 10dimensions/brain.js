{"version":3,"sources":["../../src/layer/multiply-element.js"],"names":["MultiplyElement","inputLayer1","inputLayer2","width","height","validate","weights","deltas","Error","predictKernel","predict","output","compareKernel","compare","inputLayer","inputLayerWeights","thread","y","x"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;;;;;IAEqBA,e;;;AACnB,2BAAYC,WAAZ,EAAyBC,WAAzB,EAAsC;AAAA;;AAAA;;AAEpC,UAAKD,WAAL,GAAmBA,WAAnB;AACA,UAAKC,WAAL,GAAmBA,WAAnB;;AAEA,UAAKC,KAAL,GAAaF,YAAYE,KAAzB;AACA,UAAKC,MAAL,GAAcH,YAAYG,MAA1B;AACA,UAAKC,QAAL;AACA,UAAKC,OAAL,GAAe,uBAAQ,MAAKH,KAAb,EAAoB,MAAKC,MAAzB,CAAf;AACA,UAAKG,MAAL,GAAc,uBAAQ,MAAKJ,KAAb,EAAoB,MAAKC,MAAzB,CAAd;AAToC;AAUrC;;;;+BAEU;AACT;AACA,UAAI,KAAKH,WAAL,CAAiBE,KAAjB,KAA2B,KAAKD,WAAL,CAAiBC,KAAhD,EAAuD;AACrD,cAAM,IAAIK,KAAJ,8BAAqC,KAAKP,WAAL,CAAiBE,KAAtD,aAAmE,KAAKD,WAAL,CAAiBC,KAApF,CAAN;AACD;;AAED,UAAI,KAAKF,WAAL,CAAiBG,MAAjB,KAA4B,KAAKF,WAAL,CAAiBE,MAAjD,EAAyD;AACvD,cAAM,IAAII,KAAJ,+BAAsC,KAAKP,WAAL,CAAiBG,MAAvD,aAAqE,KAAKF,WAAL,CAAiBE,MAAtF,CAAN;AACD;AACF;;;mCAEc;AACb,WAAKK,aAAL,GAAqB,0BAAWC,OAAX,EAAoB;AACvCC,gBAAQ,CAAC,KAAKR,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;;AAIA,WAAKQ,aAAL,GAAqB,0BAAWC,OAAX,EAAoB;AACvCF,gBAAQ,CAAC,KAAKR,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;AAGD;;;8BAES;AACR,WAAKE,OAAL,GAAe,KAAKG,aAAL,CAAmB,KAAKH,OAAxB,EAAiC,KAAKQ,UAAL,CAAgBR,OAAjD,CAAf;AACD;;;8BAES;AACR,WAAKC,MAAL,GAAc,KAAKK,aAAL,CAAmB,KAAKN,OAAxB,EAAiC,KAAKC,MAAtC,CAAd;AACD;;;;;;kBAxCkBP,e;;;AA2CrB,SAASU,OAAT,CAAiBJ,OAAjB,EAA0BS,iBAA1B,EAA6C;AAC3C,SAAOT,QAAQ,KAAKU,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,kBAAkB,KAAKC,MAAL,CAAYC,CAA9B,EAAiC,KAAKD,MAAL,CAAYE,CAA7C,CAA/C;AACD;;AAED,SAASL,OAAT,CAAiBP,OAAjB,EAA0BC,MAA1B,EAAkC;AAChC,SAAOD,QAAQ,KAAKU,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCX,OAAO,KAAKS,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAA/C;AACD","file":"multiply-element.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport { Operator } from './types';\nimport zeros2D from \"../utilities/zeros-2d\";\n\nexport default class MultiplyElement extends Operator {\n  constructor(inputLayer1, inputLayer2) {\n    super();\n    this.inputLayer1 = inputLayer1;\n    this.inputLayer2 = inputLayer2;\n\n    this.width = inputLayer1.width;\n    this.height = inputLayer1.height;\n    this.validate();\n    this.weights = zeros2D(this.width, this.height);\n    this.deltas = zeros2D(this.width, this.height);\n  }\n\n  validate() {\n    super.validate();\n    if (this.inputLayer1.width !== this.inputLayer2.width) {\n      throw new Error(`Layer width mismatch of ${this.inputLayer1.width} and ${this.inputLayer2.width}`);\n    }\n\n    if (this.inputLayer1.height !== this.inputLayer2.height) {\n      throw new Error(`Layer height mismatch of ${this.inputLayer1.height} and ${this.inputLayer2.height}`);\n    }\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.weights, this.inputLayer.weights);\n  }\n\n  compare() {\n    this.deltas = this.compareKernel(this.weights, this.deltas);\n  }\n}\n\nfunction predict(weights, inputLayerWeights) {\n  return weights[this.thread.y][this.thread.x] * inputLayerWeights[this.thread.y][this.thread.x];\n}\n\nfunction compare(weights, deltas) {\n  return weights[this.thread.y][this.thread.x] * deltas[this.thread.y][this.thread.x];\n}"]}